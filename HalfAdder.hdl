// Basic logic gates are assumed to be available: And, Or, Not, Xor

// 1. Half Adder
CHIP HalfAdder {
    IN a, b;
    OUT sum, carry;
    PARTS:
    Xor(a=a, b=b, out=sum);
    And(a=a, b=b, out=carry);
}

// 2. Full Adder
CHIP FullAdder {
    IN a, b, c;
    OUT sum, carry;
    PARTS:
    HalfAdder(a=a, b=b, sum=sum1, carry=carry1);
    HalfAdder(a=sum1, b=c, sum=sum, carry=carry2);
    Or(a=carry1, b=carry2, out=carry);
}

// 3. Add16
CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];
    PARTS:
    HalfAdder(a=a[0], b=b[0], sum=out[0], carry=carry0);
    FullAdder(a=a[1], b=b[1], c=carry0, sum=out[1], carry=carry1);
    FullAdder(a=a[2], b=b[2], c=carry1, sum=out[2], carry=carry2);
    // ... (repeat for bits 3-14)
    FullAdder(a=a[15], b=b[15], c=carry14, sum=out[15], carry=carry15);
}

// 4. Inc16
CHIP Inc16 {
    IN in[16];
    OUT out[16];
    PARTS:
    Add16(a=in, b[0]=true, b[1..15]=false, out=out);
}

// 5. And16
CHIP And16 {
    IN a[16], b[16];
    OUT out[16];
    PARTS:
    And(a=a[0], b=b[0], out=out[0]);
    And(a=a[1], b=b[1], out=out[1]);
    // ... (repeat for bits 2-15)
}

// 6. Or16
CHIP Or16 {
    IN a[16], b[16];
    OUT out[16];
    PARTS:
    Or(a=a[0], b=b[0], out=out[0]);
    Or(a=a[1], b=b[1], out=out[1]);
    // ... (repeat for bits 2-15)
}

// 7. Not16
CHIP Not16 {
    IN in[16];
    OUT out[16];
    PARTS:
    Not(in=in[0], out=out[0]);
    Not(in=in[1], out=out[1]);
    // ... (repeat for bits 2-15)
}

// 8. Mux
CHIP Mux {
    IN a, b, sel;
    OUT out;
    PARTS:
    Not(in=sel, out=notSel);
    And(a=a, b=notSel, out=aAndNotSel);
    And(a=b, b=sel, out=bAndSel);
    Or(a=aAndNotSel, b=bAndSel, out=out);
}

// 9. Mux16
CHIP Mux16 {
    IN a[16], b[16], sel;
    OUT out[16];
    PARTS:
    Mux(a=a[0], b=b[0], sel=sel, out=out[0]);
    Mux(a=a[1], b=b[1], sel=sel, out=out[1]);
    // ... (repeat for bits 2-15)
}

// 10. Mux4Way16
CHIP Mux4Way16 {
    IN a[16], b[16], c[16], d[16], sel[2];
    OUT out[16];
    PARTS:
    Mux16(a=a, b=b, sel=sel[0], out=abMux);
    Mux16(a=c, b=d, sel=sel[0], out=cdMux);
    Mux16(a=abMux, b=cdMux, sel=sel[1], out=out);
}

// 11. Or8Way
CHIP Or8Way {
    IN in[8];
    OUT out;
    PARTS:
    Or(a=in[0], b=in[1], out=or01);
    Or(a=or01, b=in[2], out=or012);
    Or(a=or012, b=in[3], out=or0123);
    Or(a=or0123, b=in[4], out=or01234);
    Or(a=or01234, b=in[5], out=or012345);
    Or(a=or012345, b=in[6], out=or0123456);
    Or(a=or0123456, b=in[7], out=out);
}